package com.example.daniyar_yeleussiz_230103200;

import javafx.animation.Animation;
import javafx.animation.KeyFrame;
import javafx.animation.Timeline;
import javafx.application.Application;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.canvas.Canvas;
import javafx.scene.canvas.GraphicsContext;
import javafx.scene.control.Button;
import javafx.scene.image.Image;
import javafx.scene.input.KeyCode;
import javafx.scene.paint.Color;
import javafx.scene.text.Font;
import javafx.scene.text.FontWeight;
import javafx.stage.Stage;
import javafx.util.Duration;
import javafx.scene.image.ImageView;

import java.awt.*;
import java.util.ArrayList;
import java.util.List;


public class Daniyar_Yeleussiz_230103200 extends Application {

    private static final int WIDTH = 600;
    private static final int HEIGHT = WIDTH;
    private static final int ROWS = 20;
    private static final int COLUMNS = ROWS;
    private static final int SQUARE_SIZE = WIDTH / ROWS;

    private static final int RIGHT = 0;
    private static final int LEFT = 1;
    private static final int UP = 2;
    private static final int DOWN = 3;


    private GraphicsContext gc;
    private List<Point> snakeBody = new ArrayList<>();
    private Point snakeHead;
    private int foodX;
    private int foodY;
    private boolean gameOver;
    private int currentDirection;
    private int score = 0;
    private int recordScore = 0;
    private Timeline timeline;
    private Button restartButton;

    private Button startButton;
    private Image snakeHeadImage;
    private Image foodImage;




    Group root;

    @Override
    public void start(Stage primaryStage) {


        Image snakeImage = new Image("file:src/main/java/com/example/daniyar_yeleussiz_230103200/background.jpg");
        snakeHeadImage = new Image("file:src/main/java/com/example/daniyar_yeleussiz_230103200/snake.png");
        foodImage = new Image("file:src/main/java/com/example/daniyar_yeleussiz_230103200/apple.png");





        ImageView imageView = new ImageView(snakeImage);
        imageView.setX(0);
        imageView.setY(0);

        imageView.setFitWidth(600);
        imageView.setFitHeight(600);


        primaryStage.setTitle("Snake");
        root = new Group();
        Canvas canvas = new Canvas(WIDTH, HEIGHT);


        root.getChildren().add(imageView);







        root.getChildren().add(canvas);



        Scene scene = new Scene(root);



        primaryStage.setResizable(false);
        primaryStage.setScene(scene);
        primaryStage.show();







        gc = canvas.getGraphicsContext2D();

        double initialSpeed = 100.0;
        double speedIncreaseFactor = 0.99;

        timeline = new Timeline(new KeyFrame(Duration.millis(initialSpeed), e -> run(gc)));
        timeline.setCycleCount(Animation.INDEFINITE);
        timeline.play();


        restartButton = new Button("Restart");
        restartButton.setLayoutX(200);
        restartButton.setLayoutY(400);
        restartButton.setPrefWidth(200);
        restartButton.setPrefHeight(50);
        restartButton.setOnAction(event -> {
            restartGame();
            hideRestartButton();
        });
        root.getChildren().add(restartButton);
        hideRestartButton();



        timeline.stop();
        startButton = new Button("Start");

        startButton.setLayoutX(150);
        startButton.setLayoutY(330);
        startButton.setPrefWidth(300);
        startButton.setPrefHeight(70);
        startButton.setOnAction(event -> startGame());
        root.getChildren().add(startButton);




        scene.setOnKeyPressed(event -> {
            KeyCode code = event.getCode();

            if (code == KeyCode.SPACE && startButton.isVisible()) {
                startGame();
            } else if (!gameOver) {
                if (code == KeyCode.RIGHT || code == KeyCode.D) {
                    timeline.stop();
                    if (currentDirection != LEFT) {
                        currentDirection = RIGHT;
                    }
                    timeline.play();
                } else if (code == KeyCode.LEFT || code == KeyCode.A) {
                    timeline.stop();
                    if (currentDirection != RIGHT) {
                        currentDirection = LEFT;
                    }
                    timeline.play();
                } else if (code == KeyCode.UP || code == KeyCode.W) {
                    timeline.stop();
                    if (currentDirection != DOWN) {
                        currentDirection = UP;
                    }
                    timeline.play();
                } else if (code == KeyCode.DOWN || code == KeyCode.S) {
                    timeline.stop();
                    if (currentDirection != UP) {
                        currentDirection = DOWN;
                    }
                    timeline.play();
                } else if (code == KeyCode.SPACE) {
                    timeline.stop();
                } else if (code == KeyCode.R) {
                    restartGame();
                }
            } else if (code == KeyCode.SPACE || code == KeyCode.R) {
                restartGame();
            }
        });

        for (int i = 0; i < 3; i++) {
            snakeBody.add(new Point(5, ROWS / 2));
        }
        snakeHead = snakeBody.get(0);
        generateFood();
    }

    private void startGame() {
        startButton.setVisible(false);
        timeline.play();
    }


    private void showRestartButton() {
        restartButton.setVisible(true);
    }

    private void hideRestartButton() {
        restartButton.setVisible(false);
    }

    private void hideStartButton() {
        startButton.setVisible(false);
    }

    private void run(GraphicsContext gc) {
        if (gameOver) {
            displayScores();
            return;
        }
        drawBackground(gc);
        drawFood(gc);
        drawSnake(gc);
        drawScore();

        for (int i = snakeBody.size() - 1; i >= 1; i--) {
            snakeBody.get(i).x = snakeBody.get(i - 1).x;
            snakeBody.get(i).y = snakeBody.get(i - 1).y;
        }

        switch (currentDirection) {
            case RIGHT:
                moveRight();
                break;
            case LEFT:
                moveLeft();
                break;
            case UP:
                moveUp();
                break;
            case DOWN:
                moveDown();
                break;
        }

        gameOver();
        eatFood();

        double newSpeed = 100.0 * Math.pow(0.95, score);
        timeline.setRate(100.0 / newSpeed);
    }

    private void drawBackground(GraphicsContext gc) {
        for (int i = 0; i < ROWS; i++) {
            for (int j = 0; j < COLUMNS; j++) {
                if ((i + j) % 2 == 0) {
                    gc.setFill(Color.web("AAD751"));
                } else {
                    gc.setFill(Color.web("A2D149"));
                }
                gc.fillRect(i * SQUARE_SIZE, j * SQUARE_SIZE, SQUARE_SIZE, SQUARE_SIZE);
            }
        }
    }

    private void generateFood() {
        foodX = (int) (Math.random() * ROWS);
        foodY = (int) (Math.random() * COLUMNS);
    }

    private void drawFood(GraphicsContext gc) {
        gc.drawImage(foodImage, foodX * SQUARE_SIZE, foodY * SQUARE_SIZE, SQUARE_SIZE, SQUARE_SIZE);

    }

    private void drawSnake(GraphicsContext gc) {


        Color snakeColor;

        if (score >= 30) {
            snakeColor = Color.DEEPSKYBLUE;
        } else if (score >= 20) {
            snakeColor = Color.STEELBLUE;
        }else if (score >= 15) {
            snakeColor = Color.SLATEBLUE;
        } else if (score >= 10) {
            snakeColor = Color.CADETBLUE;
        } else if (score >= 5) {
            snakeColor = Color.DARKBLUE;
        } else {
            snakeColor = Color.BLUE;
        }


        drawRotatedImage(gc, snakeHeadImage, snakeHead.getX() * SQUARE_SIZE, snakeHead.getY() * SQUARE_SIZE, getRotationAngle());

        for (int i = 1; i < snakeBody.size(); i++) {
            gc.setFill(snakeColor);
            gc.fillOval(snakeBody.get(i).getX() * SQUARE_SIZE, snakeBody.get(i).getY() * SQUARE_SIZE, SQUARE_SIZE - 1,
                    SQUARE_SIZE - 1);
        }
    }

    private void moveRight() {
        snakeHead.x = (snakeHead.x + 1) % ROWS;
    }

    private void moveLeft() {
        snakeHead.x = (snakeHead.x - 1 + ROWS) % ROWS;
    }

    private void moveUp() {
        snakeHead.y = (snakeHead.y - 1 + COLUMNS) % COLUMNS;
    }

    private void moveDown() {
        snakeHead.y = (snakeHead.y + 1) % COLUMNS;
    }

    public void gameOver() {
        if (snakeHead.x < 0 || snakeHead.y < 0 || snakeHead.x * SQUARE_SIZE >= WIDTH || snakeHead.y * SQUARE_SIZE >= HEIGHT) {
            gameOver = true;
            updateRecordScore();
        }

        for (int i = 1; i < snakeBody.size(); i++) {
            if (snakeHead.x == snakeBody.get(i).getX() && snakeHead.getY() == snakeBody.get(i).getY()) {
                gameOver = true;
                updateRecordScore();
                break;
            }
        }
    }

    private void updateRecordScore() {
        if (score > recordScore) {
            recordScore = score;
        }
    }

    private void eatFood() {
        if (snakeHead.getX() == foodX && snakeHead.getY() == foodY) {
            snakeBody.add(new Point(-1, -1));
            generateFood();
            score++;
        }
    }

    private void drawScore() {
        gc.setFill(Color.WHITE);
        gc.setFont(new Font("Digital-7", 35));
        gc.fillText("Score: " + score, 10, 35);
    }

    private void displayScores() {
        gc.clearRect(0, 0, WIDTH, HEIGHT);


        gc.setFill(Color.RED);
        gc.setFont(Font.font("Monospaced", FontWeight.BOLD, 80));
        gc.fillText("Game Over", 90, 370);




        gc.setFont(Font.font("Monospaced",FontWeight.BOLD, 40));
        gc.setFill(Color.WHITE);
        gc.fillText("Score:" + score, 130, 100);
        gc.fillText("Record:" + recordScore, 330, 100);


        showRestartButton();

    }

    private void restartGame() {
        snakeBody.clear();
        for (int i = 0; i < 3; i++) {
            snakeBody.add(new Point(5, ROWS / 2));
        }
        snakeHead = snakeBody.get(0);
        currentDirection = RIGHT;
        score = 0;
        gameOver = false;

        generateFood();

        gc.clearRect(0, 0, WIDTH, HEIGHT);

        hideRestartButton();


    }
    private void showStartButton() {
        startButton.setVisible(true);
    }

    private void drawRotatedImage(GraphicsContext gc, Image image, double x, double y, double angle) {
        gc.save();
        gc.translate(x + SQUARE_SIZE / 2, y + SQUARE_SIZE / 2);
        gc.rotate(angle);
        gc.drawImage(image, -SQUARE_SIZE / 2, -SQUARE_SIZE / 2, SQUARE_SIZE, SQUARE_SIZE);
        gc.restore();
    }
    private double getRotationAngle() {
        switch (currentDirection) {
            case RIGHT:
                return 0;
            case LEFT:
                return 180;
            case UP:
                return -90;
            case DOWN:
                return 90;
            default:
                return 0;
        }
    }

    public static void main(String[] args) {
        launch(args);
    }
}
